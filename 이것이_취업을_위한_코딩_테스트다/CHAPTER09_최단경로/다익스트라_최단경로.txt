<< 다익스트라 최단 경로 >>

특정한 노드에서 출발하여 다른 노드로 가는 각각의 최단 경로를 구해주는 알고리즘
'음의 간선'이 없을 때 정상적으로 동작
매번 '가장 비용이 적은 노드'를 선택해서 임의의 과정을 반복하기 때문에 그리디 알고리즘으로 분류

초기 상태에서는 다른 모든 노드로 가는 최단 거리를 '무한'으로 초기화한다.


1. 간단한 다익스트라 알고리즘
시간 복잡도 : O(V^2)
단계마다 '방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택'하기 위해 매 단계마다 1차원 리스트의 모든 원소를 확인(순차 탐색)


2. 개선된 다익스트라 알고리즘
시간 복잡도 : O(ElogV)

우선순위 큐(Priority Queue) 사용
- 우선순위가 가장 높은 데이터를 먼저 삭제하는 자료구조
- 파이썬에서 표준 라이브러리 형태로 지(heapq)

힙(Heap)
시간 복잡도 : O(logN)
최소 힙(Min Heap)과 최대 힙(Max Heap)
기본적으로 최소 힙 구조를 가지고 있다.

import heapq

기존배열을 heap 구조로 - heapify()
arr = [ 2, 3, 1, 4, 5 ]
heapq.heapify(arr)

heap에 요소 추가하기 - heappush(배열이름, 요소)
arr = []
heapq.heappush(arr, 3)
heapq.heappush(arr, 5)
heapq.heappush(arr, 1)
heapq.heappush(arr, -3)
print(arr)  // [-3, 1, 3, 5]

heap 요소 삭제하기 - heappop(배열이름) // 가장 작은 원소를 pop
heapq.heappop(arr)
print(arr)  // [1, 3, 5]
